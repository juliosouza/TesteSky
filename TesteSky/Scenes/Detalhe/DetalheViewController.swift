//
//  DetalheViewController.swift
//  TesteSky
//
//  Created by Julio Cezar de Souza on 24/06/20.
//  Copyright (c) 2020 Julio Souza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetalheDisplayLogic: class {
    func displaySomething(viewModel: Detalhe.Something.ViewModel)
}

class DetalheViewController: UIViewController, DetalheDisplayLogic {
    
    // MARK - Vari√°veis
    
    var interactor: DetalheBusinessLogic?
    var router: (NSObjectProtocol & DetalheRoutingLogic & DetalheDataPassing)?
    
    // MARK - Outlets
    
    @IBOutlet weak var imageMovieDetalhe: UIImageView!
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = DetalheInteractor()
        let presenter = DetalhePresenter()
        let router = DetalheRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    

    
    var detalhe: ListaFilmes.Filme?
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        print(detalhe)
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething() {
        let request = Detalhe.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Detalhe.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}
